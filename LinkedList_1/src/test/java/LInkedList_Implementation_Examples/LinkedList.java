package LInkedList_Implementation_Examples;

public class LinkedList
{
    Node head; // создаем головной узел head - по умолчанию head == null
    // далее добавляем методы для работы с данными
    public void insert(int data) // вставка элемента в конец списка
    { // вставка данных в конец списка. при вставке мы будем создавать новый узел
        Node node = new Node();
        node.data = data;
        node.next = null; // написано для наглядности. по умолчанию и так будет null
        // надо так же проверить - не является ли список пустым
        if(head == null)
        { // если головной узел равен null, то есть его нет и список пустой сам по себе
            head = node; // если список пустой, то в head мы помещаем сам наш создаваемый узел
        }
        else
        {
            // а что если у нас список не пустой?
            Node n = head; // почему так? представьте, что у вас есть список и мы хз сколько там элементов. нам надо
            // пройти от начала до того момента, пока следующее значение не станет = null
            while (n.next != null)
            {
                n = n.next; // таким образом мы перемещаемся к следующему узлу. перебираем здесь по сути все узлы вайлом
            }
            n.next = node; // мы дошли до конца списка и в next последнего элемента записали новый node
        }
    }

    // Метод для вставки в начало списка
    public void insertAtStart(int data) // для этого нам надо head из текущего места переставить на новый узел
    {
       Node node = new Node();
       node.data = data;
       //node.next = null;
       node.next = head;
       head = node; // в головной узел прописали новый элемент
    }

    // Метод для вставки в произвольное место списка
    public void insertAt(int index, int data)
    {
        Node node = new Node();
        node.data = data;
        node.next = null;

        if(index == 0)
        {
            insertAtStart(data);
        }
        else
        {
            // здесь мы должны для начала перейти на нужный нам элемент по индексу
            // а для этого мы будем стартовать с head-ового узла
            Node n = head;
            for(int i=0; i<index-1; i++)
            {
                n = n.next; // перемещение по списку
            }
            // теперь нам надо поменять местами адреса - вставляемого узла и того узла, который был по нужному адресу
            node.next = n.next;
            n.next = node;
        }
    }

    public void show() // метод для отображения списка
    { // здесь нам так же придется пройтись по всем узлам
        Node node = head; // так же создаем узел, который устанавливаем как бы в начало списка по сути
        while (node != null) // до тех пор, пока не дойдем до конца списка
        {
            System.out.println(node.data); // печатаем значения узлов
            node = node.next; // переходим к следующему узлу
        }
    }
}
